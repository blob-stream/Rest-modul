{
  "name": "clarifai",
  "version": "1.2.1",
  "description": "Official Clarifai Javascript SDK",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/Clarifai/clarifai-javascript"
  },
  "author": {
    "name": "Clarifai Inc."
  },
  "license": "Apache-2.0",
  "dependencies": {
    "axios": "0.9.1",
    "es6-promise": "3.1.2"
  },
  "devDependencies": {
    "del": "2.0.2",
    "envify": "3.4.0",
    "git-branch": "0.3.0",
    "gulp": "3.9.0",
    "gulp-awspublish": "3.0.1",
    "gulp-browserify": "0.5.1",
    "gulp-concat": "2.6.0",
    "gulp-data": "1.2.1",
    "gulp-eslint": "2.0.0",
    "gulp-htmlmin": "1.2.0",
    "gulp-if": "2.0.0",
    "gulp-imagemin": "2.3.0",
    "gulp-insert": "0.5.0",
    "gulp-jasmine": "^2.2.1",
    "gulp-newer": "0.5.1",
    "gulp-notify": "2.2.0",
    "gulp-rename": "1.2.2",
    "gulp-replace-task": "0.11.0",
    "gulp-uglify": "1.4.1",
    "gulp-util": "3.0.6",
    "gulp-webserver": "0.9.1",
    "gulp-zip": "^3.2.0",
    "require-dir": "0.3.0",
    "serve-static": "1.10.0"
  },
  "readme": "# Clarifai JavaScript Client\n\nThe official JavaScript client for interacting with the [Clarifai API](https://developer.clarifai.com).\n\n## Basic Use\n\nTo start, install the SDK via NPM: `npm install clarifai` and initialize with your clientId and\nclientSecret:\n\n*This will work in node.js and browsers via [Browserify](http://browserify.org/)*\n\n```js\nvar Clarifai = require('clarifai');\n\nClarifai.initialize({\n  'clientId': '{clientId}',\n  'clientSecret': '{clientSecret}'\n});\n\n```\n\nYou can also use the SDK by adding this script to your HTML:\n\n```js\n<script type=\"text/javascript\" src=\"https://sdk.clarifai.com/js/clarifai-1.2.1.js\"></script>\n<script>\n  Clarifai.initialize({\n    'clientId': '{clientId}',\n    'clientSecret': '{clientSecret}'\n  });\n</script>\n```\n\n## Table of Contents\n\n#### Tag\n\n* [Get tags for an image via URL](#get-tags-for-an-image-via-url)\n* [Get tags for an image via bytes](#get-tags-for-an-image-via-image-bytes)\n* [Get tags for multiple images via url](#get-tags-for-multiple-images-via-url)\n* [Get tags for an image via url passing in a model](#get-tags-for-an-image-via-url-passing-in-a-model)\n* [Get tags for an image via url passing in a language](#get-tags-for-an-image-via-url-passing-in-a-language)\n* [Get tags for an image via url and set a localId](#get-tags-for-an-image-via-url-and-set-a-localid)\n* [Get tags for an image via url and restrict the tags returned](#get-tags-for-an-image-via-url-and-restrict-the-tags-returned)\n\n#### Info\n\n* [Get API info](#get-api-info)\n\n#### Languages\n\n* [Get supported languages](#get-supported-languages)\n\n#### Color\n\n* [Get colors for an image via url](#get-colors-for-an-image-via-url)\n\n#### Usage\n\n* [Get API usage](#get-api-usage)\n\n#### Feedback\n\n* [Send feedback to the API](#send-feedback-to-the-api)\n\n#### Token\n\n* [Get a token](#get-a-token)\n* [Set a token](#set-a-token)\n* [Delete a token](#delete-a-token)\n\n#### Promises and Callbacks\n\n* [Instructions](#promises-and-callbacks)\n\n## Examples\n\n### Tag\n\n#### Get tags for an image via url\n\n```js\nClarifai.getTagsByUrl('https://samples.clarifai.com/wedding.jpg').then(\n  handleResponse,\n  handleError\n);\n```\n\n#### Get tags for multiple images via url\n\n```js\nClarifai.getTagsByUrl([\n  'https://samples.clarifai.com/wedding.jpg',\n  'https://samples.clarifai.com/cookies.jpeg'\n]).then(\n  handleResponse,\n  handleError\n);\n```\n\n#### Get tags for an image via image bytes\n\n```js\nClarifai.getTagsByImageBytes('R0lGODlhZAHIAPcAAKeno6Oinc3Do6iVeMe7o1ZEM...').then(\n  handleResponse,\n  handleError\n);\n```\n\n#### Get tags for an image via url passing in a model\n\n```js\nClarifai.getTagsByUrl('https://samples.clarifai.com/wedding.jpg', {\n  'model': 'nsfw-v0.1'\n}).then(\n  handleResponse,\n  handleError\n);\n```\n\n#### Get tags for an image via url passing in a language\n\n```js\nClarifai.getTagsByUrl('https://samples.clarifai.com/wedding.jpg', {\n  'language': 'es'\n}).then(\n  handleResponse,\n  handleError\n);\n```\n\n#### Get tags for an image via url and set a localId\n\n```js\nClarifai.getTagsByUrl('https://samples.clarifai.com/wedding.jpg', {\n  'localId': 'myLocalId'\n}).then(\n  handleResponse,\n  handleError\n);\n```\n\n#### Get tags for an image via url and restrict the tags returned\n\n```js\nClarifai.getTagsByUrl(\n  'https://samples.clarifai.com/wedding.jpg',\n  {\n    'selectClasses': ['people', 'dress', 'wedding']\n  }\n).then(\n  handleResponse,\n  handleError\n);\n```\n\n### Info\n\n#### Get API info\n\n```js\nClarifai.getInfo().then(\n  handleResponse,\n  handleError\n);\n```\n\n### Languages\n\n#### Get supported languages\n\n```js\nClarifai.getLanguages().then(\n  handleResponse,\n  handleError\n);\n```\n\n### Color\n\n#### Get colors for an image via url\n\n```js\nClarifai.getColorsByUrl('https://samples.clarifai.com/wedding.jpg').then(\n  handleResponse,\n  handleError\n);\n```\n\n#### Get colors for an image via image bytes\n\n```js\nClarifai.getColorsByImageBytes('R0lGODlhZAHIAPcAAKeno6Oinc3Do6iVeMe7o1ZEM...').then(\n  handleResponse,\n  handleError\n);\n```\n\n### Usage\n\n#### Get API usage\n\n```js\nClarifai.getUsage().then(\n  handleResponse,\n  handleError\n);\n```\n\n### Feedback\n\n#### Send feedback to the API\n\n```js\nClarifai.createFeedback('https://samples.clarifai.com/wedding.jpg', {\n  'addTags': ['family', 'friends',],\n  'removeTags': ['military', 'protest'],\n}).then(\n  handleResponse,\n  handleError\n);\n```\n\n### Token\n\n#### Get a token\n\n**Note:** You should not have to call this directly in most cases. Any method that needs a token will call\nit for you. \n\n```js\nClarifai.getToken().then(\n  function(response) {\n    console.log(response);\n  },\n  function(err){\n    console.log(err);\n  }\n);\n```\n\n#### Set a token\n\n```js\nvar tokenSetBoolean = Clarifai.setToken('some-token-string');\n```\n\n#### Delete a token\n\n```js\nClarifai.deleteToken();\n```\n\n### Promises and Callbacks\n\nAll methods return promises. If you'd rather user callbacks, just pass in a callback function as the last\nparam to any method. If there are multiple params and some are optional, you'll need to pass in `null` for\nthose.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/Clarifai/clarifai-javascript/issues"
  },
  "_id": "clarifai@1.2.1",
  "dist": {
    "shasum": "3d456d5f3eea5a935d07d818205274f6c0f4954c"
  },
  "_from": "clarifai@",
  "_resolved": "https://registry.npmjs.org/clarifai/-/clarifai-1.2.1.tgz"
}
