{
  "name": "shutterstock",
  "version": "0.12.0",
  "description": "Shutterstock API client",
  "main": "./lib",
  "dependencies": {
    "lodash": "^3.10.0",
    "papi": "^0.20.0"
  },
  "devDependencies": {
    "async": "^1.4.0",
    "debug": "^2.1.3",
    "fixturefiles": "^0.1.0",
    "istanbul": "^0.3.13",
    "jscs": "^1.12.0",
    "jshint": "^2.6.3",
    "mocha": "^2.2.1",
    "nock": "^2.9.1",
    "node-uuid": "^1.4.3",
    "should": "^7.0.2"
  },
  "scripts": {
    "cover": "./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --recursive && open coverage/lcov-report/index.html",
    "test": "./node_modules/.bin/jshint lib test && ./node_modules/.bin/jscs lib test && ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --recursive --check-leaks",
    "acceptance": "NOCK_OFF=true ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --recursive --timeout 15000"
  },
  "keywords": [
    "api",
    "shutterstock"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/silas/node-shutterstock.git"
  },
  "author": {
    "name": "Silas Sewell",
    "email": "silas@sewell.org"
  },
  "license": "MIT",
  "readme": "# Shutterstock [![Build Status](https://secure.travis-ci.org/silas/node-shutterstock.png?branch=master)](http://travis-ci.org/silas/node-shutterstock)\n\nThis is a Node.js [Shutterstock API][v2] client.\n\n * [Usage](#usage)\n * [Documentation](#documentation)\n * [License](#license)\n\n## Usage\n\nInstall\n\n``` console\n$ npm install shutterstock --save\n```\n\nExample\n\n``` javascript\nvar shutterstock = require('shutterstock');\n\nvar api = shutterstock.v2({\n  clientId: 'a134a44b2220a831d511',\n  clientSecret: '0498a3442cf2ad2d11efbda32a32fa26a20d229c',\n});\n\napi.image.get('108559295', function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n## Documentation\n\n * [shutterstock.v2](#v2)\n   * [v2.audio.list](#v2.audio.list)\n   * [v2.audio.get](#v2.audio.get)\n   * [v2.audio.search](#v2.audio.search)\n   * [v2.contributor.get](#v2.contributor.get)\n   * [v2.image.categories](#v2.image.categories)\n   * [v2.image.list](#v2.image.list)\n   * [v2.image.get](#v2.image.get)\n   * [v2.image.recommendations](#v2.image.recommendations)\n   * [v2.image.search](#v2.image.search)\n   * [v2.image.similar](#v2.image.similar)\n   * [v2.video.list](#v2.video.list)\n   * [v2.video.get](#v2.video.get)\n   * [v2.video.search](#v2.video.search)\n   * [v2.video.similar](#v2.video.similar)\n * [shutterstock.v1](#v1)\n   * [v1.echo](#v1.echo)\n   * [v1.image.search](#v1.image.search)\n   * [v1.image.get](#v1.image.get)\n   * [v1.image.similar](#v1.image.similar)\n   * [v1.image.categories](#v1.image.categories)\n   * [v1.image.download](#v1.image.download)\n   * [v1.customer.auth](#v1.customer.auth)\n   * [v1.customer.register](#v1.customer.register)\n   * [v1.customer.get](#v1.customer.get)\n   * [v1.customer.images](#v1.customer.images)\n   * [v1.customer.subscriptions](#v1.customer.subscriptions)\n   * [v1.lightbox.list](#v1.lightbox.list)\n   * [v1.lightbox.get](#v1.lightbox.get)\n   * [v1.lightbox.publicUrl](#v1.lightbox.publicUrl)\n   * [v1.lightbox.create](#v1.lightbox.create)\n   * [v1.lightbox.update](#v1.lightbox.update)\n   * [v1.lightbox.destroy](#v1.lightbox.destroy)\n   * [v1.lightbox.add](#v1.lightbox.add)\n   * [v1.lightbox.remove](#v1.lightbox.remove)\n   * [v1.video.search](#v1.video.search)\n   * [v1.video.get](#v1.video.get)\n   * [v1.video.download](#v1.video.download)\n\n<a name=\"callback\"/>\n### Callback\n\nAll callbacks have the following signature `function(err, data, res)`.\n\n * err (Error, optional): set if there was an error, otherwise falsy\n * data (Object, optional): response data if any, otherwise `undefined`\n * res (http.IncomingMessage, optional): HTTP response object with additional `body` property. This might not exist when `err` is set. The `body` property can be a decoded object, string, or Buffer.\n\n<a name=\"v2\"/>\n### Class: shutterstock.v2(options)\n\nThis is a client for interacting with [API v2][v2].\n\nOptions\n\n * clientId (String): OAuth2 client ID\n * clientSecret (String): OAuth2 client secret\n * accessToken (String, optional): OAuth2 access token\n * timeout (Number, default: 30000): number of milliseconds before request is aborted\n\nUsage\n\n``` javascript\nvar shutterstock = require('shutterstock');\n\nvar v2 = shutterstock.v2({\n  clientId: 'client-id',\n  clientSecret: 'client-secret',\n});\n```\n\n<a name=\"v2.audio.list\"/>\n#### v2.audio.list(options, callback)\n\nGet details for multiple audio tracks.\n\nOptions - [Documentation](https://developers.shutterstock.com/api/v2/audio/list)\n\n * id (String[]): track IDs\n * view (String, optional): render view\n\nUsage\n\n``` javascript\nv2.audio.list(['113011', '15326'], function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v2.audio.get\"/>\n#### v2.audio.get(options, callback)\n\nGet details for a specified track.\n\nOptions - [Documentation](https://developers.shutterstock.com/api/v2/audio/get)\n\n * id (String): track ID\n * view (String, optional): render view\n\nUsage\n\n``` javascript\nv2.audio.get('113011', function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v2.audio.search\"/>\n#### v2.audio.search(options, callback)\n\nSearch tracks.\n\nOptions - [Documentation](https://developers.shutterstock.com/api/v2/audio/search)\n\n * query (String, optional): query string\n * page (Number, default: 1): page to return\n * per_page (Number, default: 20): number of results to return per page\n * sort (String, default: popular): sort results\n\nAnd many more, see official documentation for more details.\n\nUsage\n\n``` javascript\nv2.audio.search('beat', function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v2.contributor.get\"/>\n#### v2.contributor.get(options, callback)\n\nSearch tracks.\n\nOptions - [Documentation](https://developers.shutterstock.com/api/v2/contributors/get)\n\n  * id (String): contributor ID\n\nUsage\n\n``` javascript\nv2.contributor.get('164782', function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v2.image.categories\"/>\n#### v2.image.categories(callback)\n\nGet all image categories.\n\n[Documentation](https://developers.shutterstock.com/api/v2/image/categories)\n\nUsage\n\n``` javascript\nv2.image.categories(function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v2.image.list\"/>\n#### v2.image.list(options, callback)\n\nGet details for multiple images.\n\nOptions - [Documentation](https://developers.shutterstock.com/api/v2/image/list)\n\n * id (String[]): image IDs\n * view (String, optional): render view\n\nUsage\n\n``` javascript\nv2.image.list(['108559295', '143051491'], function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v2.image.get\"/>\n#### v2.image.get(options, callback)\n\nGet details for a specified image.\n\nOptions - [Documentation](https://developers.shutterstock.com/api/v2/image/get)\n\n * id (String): image ID\n * view (String, optional): render view\n\nUsage\n\n``` javascript\nv2.image.get('108559295', function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v2.image.recommendations\"/>\n#### v2.image.recommendations(options, callback)\n\nReturn recommendations for specified images.\n\nOptions - [Documentation](https://developers.shutterstock.com/api/v2/image/recommendations)\n\n * id (String[]): image IDs\n * max_items (Number, default: 20): number of results to return\n\nAnd more, see official documentation for more details.\n\nUsage\n\n``` javascript\nv2.image.recommendations(['108559295', '143051491'], function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v2.image.search\"/>\n#### v2.image.search(options, callback)\n\nSearch images.\n\nOptions - [Documentation](https://developers.shutterstock.com/api/v2/image/search)\n\n * query (String, optional): query string\n * page (Number, default: 1): page to return\n * per_page (Number, default: 20): number of results to return per page\n * sort (String, default: popular): sort results\n\nAnd many more, see official documentation for more details.\n\nUsage\n\n``` javascript\nv2.image.search('donkey', function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v2.image.similar\"/>\n#### v2.image.similar(options, callback)\n\nGet similar images.\n\nOptions - [Documentation](https://developers.shutterstock.com/api/v2/image/similar)\n\n * id (String, optional): image ID\n * page (Number, default: 1): page to return\n * per_page (Number, default: 20): number of results to return per page\n * sort (String, default: popular): sort results\n\nUsage\n\n``` javascript\nv2.image.similar('108559295', function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v2.video.list\"/>\n#### v2.video.list(options, callback)\n\nGet details for multiple videos.\n\nOptions - [Documentation](https://developers.shutterstock.com/api/v2/video/list)\n\n * id (String[]): video IDs\n * view (String, optional): render view\n\nUsage\n\n``` javascript\nv2.video.list(['108559295', '143051491'], function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v2.video.get\"/>\n#### v2.video.get(options, callback)\n\nGet details for a specified video.\n\nOptions - [Documentation](https://developers.shutterstock.com/api/v2/video/get)\n\n * id (String): video ID\n * view (String, optional): render view\n\nUsage\n\n``` javascript\nv2.video.get('5869544', function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v2.video.search\"/>\n#### v2.video.search(options, callback)\n\nSearch videos.\n\nOptions - [Documentation](https://developers.shutterstock.com/api/v2/video/search)\n\n * query (String, optional): query string\n * page (Number, default: 1): page to return\n * per_page (Number, default: 20): number of results to return per page\n * sort (String, default: popular): sort results\n\nAnd many more, see official documentation for more details.\n\nUsage\n\n``` javascript\nv2.video.search('donkey', function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v2.video.similar\"/>\n#### v2.video.similar(options, callback)\n\nGet similar videos.\n\nOptions - [Documentation](https://developers.shutterstock.com/api/v2/video/similar)\n\n * id (String, optional): video ID\n * page (Number, default: 1): page to return\n * per_page (Number, default: 20): number of results to return per page\n * sort (String, default: popular): sort results\n\nUsage\n\n``` javascript\nv2.video.similar('4535879', function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1\"/>\n### Class: shutterstock.v1(options)\n\nThis is a client for interacting with [API v1][v1].\n\nOptions\n\n * username (String): API username (not to be confused with customer username)\n * password (String): API password (key)\n * timeout (Number, default: 30000): number of milliseconds before request is aborted\n\nUsage\n\n``` javascript\nvar shutterstock = require('shutterstock');\n\nvar v1 = shutterstock.v1({\n  username: 'api-username',\n  password: 'api-password',\n});\n```\n\n<a name=\"v1.echo\"/>\n#### v1.echo(options, callback)\n\nEcho back specified options, used to check API connection and credentials.\n\nOptions - [Documentation](https://api.shutterstock.com/#testecho)\n\n * key (String): value\n\nUsage\n\n``` javascript\nv1.image.echo({ hello: 'world' }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.image.search\"/>\n#### v1.image.search(options, callback)\n\nSearch images.\n\nOptions - [Documentation](https://api.shutterstock.com/#imagessearch)\n\n * searchterm (String): search query\n * sort_method (String, default: popular): sort results\n * page_number (Number, default: 0): page to return\n * results_per_page (Number, default: 150): number of results to return per page\n * submitter_id (Number, optional): filter results by contributor ID\n\nAnd many more, see official documentation for more details.\n\nUsage\n\n``` javascript\nv1.image.search('donkey', function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.image.get\"/>\n#### v1.image.get(options, callback)\n\nGet details for a specified image.\n\nOptions - [Documentation](https://api.shutterstock.com/#imagesimage_id)\n\n * image_id (Number): image ID\n\nUsage\n\n``` javascript\nv1.image.get(108559295, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.image.similar\"/>\n#### v1.image.similar(options, callback)\n\nGet images similar to a specified image.\n\nOptions - [Documentation](https://api.shutterstock.com/#imagesimage_idsimilar)\n\n * image_id (Number): image ID\n\nUsage\n\n``` javascript\nv1.image.similar(108559295, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.image.categories\"/>\n#### v1.image.categories(callback)\n\nGet all image categories.\n\n[Documentation](https://api.shutterstock.com/#categories)\n\nUsage\n\n``` javascript\nv1.image.categories(function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.image.download\"/>\n#### v1.image.download(options, callback)\n\nLicense image.\n\nOptions - [Documentation](http://api.shutterstock.com/#subscriptionssubscription_idimagesimage_idsizessize)\n\n * auth_token (String): authentication token, get from [customer.auth](#v1.customer.auth)\n * subscription_id (Number): photo subscription ID\n * image_id (Number): image ID\n * size (String): image size\n * format (String): image format\n\nAnd more, see official documentation for more details.\n\nUsage\n\n``` javascript\nvar opts = {\n  image_id: 108559295,\n  subscription_id: 123,\n  size: 'huge',\n  format: 'jpg',\n};\n\nv1.image.download(opts, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.customer.auth\"/>\n#### v1.customer.auth(options, callback)\n\nAuthenticate as a user.\n\nOptions - [Documentation](https://api.shutterstock.com/#authcustomer)\n\n * email (String): user's email, required if username not specified\n * username (String): user's username, required if email not specified\n * password (String): user's password\n\nUsage\n\n``` javascript\nv1.customer.auth({ username: 'john', password: 'secret' }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.customer.get\"/>\n#### v1.customer.get([options], callback)\n\nGet user information.\n\nOptions - [Documentation](https://api.shutterstock.com/#customersusername)\n\n * auth_token (String): authentication token, get from [customer.auth](#v1.customer.auth)\n * username (String): user's username\n\nUsage\n\n``` javascript\nv1.customer.get({ username: 'john' }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.customer.register\"/>\n#### v1.customer.register(options, callback)\n\nCreate new customer account.\n\nOptions - [Documentation](https://api.shutterstock.com/#customersusername)\n\n * email (String): new user's email address\n * username (String): new user's username\n * password (String): new user's password\n\nUsage\n\n``` javascript\nv1.customer.register({ email: 'john@example.org', username: 'john', password: 'secret' }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.customer.images\"/>\n#### v1.customer.images([options], callback)\n\nGet user's image downloads and the subscriptions under which they\nwere downloaded.\n\nOptions - [Documentation](https://api.shutterstock.com/#customersusernameimagesdownloads)\n\n * auth_token (String): authentication token, get from [customer.auth](#v1.customer.auth)\n * username (String): user's username\n * image_id (Number, optional): get downloads for specific image\n * license (String, optional): filter results by license\n * page_number (Number, default: 0): page to return\n * page_size (Number, default: 40): number of results to return per page\n * sort_by (String, optional): sort results\n * sort_order (String, default: desc): sort order\n\nUsage\n\n``` javascript\nv1.customer.images({ username: 'john' }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.customer.subscriptions\"/>\n#### v1.customer.subscriptions([options], callback)\n\nGet customer subscriptions.\n\nOptions - [Documentation](https://api.shutterstock.com/#customersusernamesubscriptions)\n\n * auth_token (String): authentication token, get from [customer.auth](#v1.customer.auth)\n * username (String): user's username\n\nUsage\n\n``` javascript\nv1.customer.subscriptions({ username: 'john' }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.lightbox.list\"/>\n#### v1.lightbox.list([options], callback)\n\nGet customer lightboxes.\n\nOptions - [Documentation](https://api.shutterstock.com/#customersusernamelightboxes)\n\n * auth_token (String): authentication token, get from [customer.auth](#v1.customer.auth)\n * username (String): user's username\n * exclude_empty (Boolean, default: false): filter empty lightboxes\n * exclude_images (Boolean, default: false): only return lightbox metadata\n\nUsage\n\n``` javascript\nv1.lightbox.list({ username: 'john' }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.lightbox.get\"/>\n#### v1.lightbox.get(options, callback)\n\nGet contents of lightbox.\n\nOptions - [Documentation](https://api.shutterstock.com/#lightboxeslightbox_id)\n\n * auth_token (String): authentication token, get from [customer.auth](#v1.customer.auth)\n * lightbox_id (Number): lightbox ID\n * verification_code (String, optional): access lightbox without auth_token, get from [lightbox.publicUrl](#v1.lightbox.publicUrl)\n\nUsage\n\n``` javascript\nv1.lightbox.get({ lightbox_id: 123 }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.lightbox.publicUrl\"/>\n#### v1.lightbox.publicUrl(options, callback)\n\nReturn public URL for lightbox.\n\nOptions - [Documentation](https://api.shutterstock.com/#lightboxeslightbox_idpublic_url)\n\n * auth_token (String): authentication token, get from [customer.auth](#v1.customer.auth)\n * lightbox_id (Number): lightbox ID\n\nUsage\n\n``` javascript\nv1.lightbox.publicUrl({ lightbox_id: 123 }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.lightbox.create\"/>\n#### v1.lightbox.create(options, callback)\n\nCreate new lightbox.\n\nOptions - [Documentation](https://api.shutterstock.com/#customersusernamelightboxes)\n\n * auth_token (String): authentication token, get from [customer.auth](#v1.customer.auth)\n * username (String): user's username\n * lightbox_name (String): new lightbox name\n\nUsage\n\n``` javascript\nv1.lightbox.create({ username: 'john', lightbox_name: 'Animals' }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.lightbox.update\"/>\n#### v1.lightbox.update(options, callback)\n\nUpdate lightbox.\n\nOptions - [Documentation](https://api.shutterstock.com/#lightboxeslightbox_id)\n\n * auth_token (String): authentication token, get from [customer.auth](#v1.customer.auth)\n * lightbox_id (Number): lightbox ID\n * lightbox_name (String): updated lightbox name\n\nUsage\n\n``` javascript\nv1.lightbox.update({ lightbox_id: 123, lightbox_name: 'Animals' }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.lightbox.destroy\"/>\n#### v1.lightbox.destroy(options, callback)\n\nDelete lightbox.\n\nOptions - [Documentation](https://api.shutterstock.com/#lightboxeslightbox_id)\n\n * auth_token (String): authentication token, get from [customer.auth](#v1.customer.auth)\n * lightbox_id (Number): lightbox ID\n\nUsage\n\n``` javascript\nv1.lightbox.destroy({ lightbox_id: 123 }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.lightbox.add\"/>\n#### v1.lightbox.add(options, callback)\n\nAdd image to lightbox.\n\nOptions - [Documentation](https://api.shutterstock.com/#lightboxeslightbox_idimagesimage_id)\n\n * auth_token (String): authentication token, get from [customer.auth](#v1.customer.auth)\n * lightbox_id (Number): lightbox ID\n * image_id (Number): image ID to add to lightbox\n\nUsage\n\n``` javascript\nv1.lightbox.add({ lightbox_id: 123, image_id: 108559295 }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.lightbox.remove\"/>\n#### v1.lightbox.remove(options, callback)\n\nRemove image from lightbox.\n\nOptions - [Documentation](https://api.shutterstock.com/#lightboxeslightbox_idimagesimage_id)\n\n * auth_token (String): authentication token, get from [customer.auth](#v1.customer.auth)\n * lightbox_id (Number): lightbox ID\n * image_id (Number): image ID to remove from lightbox\n\nUsage\n\n``` javascript\nv1.lightbox.remove({ lightbox_id: 123, image_id: 108559295 }, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.video.search\"/>\n#### v1.video.search(options, callback)\n\nSearch videos.\n\nOptions - [Documentation](https://api.shutterstock.com/#videossearch)\n\n * searchterm (String): search query\n * sort_method (String, default: popular): sort results\n * page_number (Number, default: 0): page to return\n * results_per_page (Number, default: 150): number of results to return per page\n * submitter_id (Number, optional): filter results by contributor ID\n\nUsage\n\n``` javascript\nv1.video.search('donkey', function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.video.get\"/>\n#### v1.video.get(options, callback)\n\nGet details for a specified video.\n\nOptions - [Documentation](https://api.shutterstock.com/#videosvideo_id)\n\n * video_id (Number): video ID\n\nUsage\n\n``` javascript\nv1.video.get(6061547, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n<a name=\"v1.video.download\"/>\n#### v1.video.download(options, callback)\n\nLicense video.\n\nOptions - [Documentation](http://api.shutterstock.com/#subscriptionssubscription_idvideosvideo_idsizessize)\n\n * auth_token (String): authentication token, get from [customer.auth](#v1.customer.auth)\n * subscription_id (Number): footage subscription ID\n * video_id (Number): video ID\n * size (String): video size\n\nAnd more, see official documentation for more details.\n\nUsage\n\n``` javascript\nvar opts = {\n  video_id: 5869544,\n  subscription_id: 123,\n  size: 'hd',\n};\n\nv1.video.download(opts, function(err, data) {\n  if (err) throw err;\n\n  console.log(data);\n});\n```\n\n## License\n\nThis work is licensed under the MIT License (see the LICENSE file).\n\n[v2]: https://developers.shutterstock.com/\n[v1]: https://api.shutterstock.com/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/silas/node-shutterstock/issues"
  },
  "_id": "shutterstock@0.12.0",
  "dist": {
    "shasum": "757736df0c3eb1ce5b7fc1026b86f2aaefcde4d5"
  },
  "_from": "shutterstock@",
  "_resolved": "https://registry.npmjs.org/shutterstock/-/shutterstock-0.12.0.tgz"
}
